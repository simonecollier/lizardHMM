// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// foralg
double foralg(int n, int N, arma::mat foo, arma::mat gamma, arma::mat allprobs);
RcppExport SEXP _lizardHMM_foralg(SEXP nSEXP, SEXP NSEXP, SEXP fooSEXP, SEXP gammaSEXP, SEXP allprobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type foo(fooSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allprobs(allprobsSEXP);
    rcpp_result_gen = Rcpp::wrap(foralg(n, N, foo, gamma, allprobs));
    return rcpp_result_gen;
END_RCPP
}
// foralg_covar
double foralg_covar(int n, int N, arma::mat foo, arma::vec gamma, arma::mat allprobs);
RcppExport SEXP _lizardHMM_foralg_covar(SEXP nSEXP, SEXP NSEXP, SEXP fooSEXP, SEXP gammaSEXP, SEXP allprobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type foo(fooSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allprobs(allprobsSEXP);
    rcpp_result_gen = Rcpp::wrap(foralg_covar(n, N, foo, gamma, allprobs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lizardHMM_foralg", (DL_FUNC) &_lizardHMM_foralg, 5},
    {"_lizardHMM_foralg_covar", (DL_FUNC) &_lizardHMM_foralg_covar, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_lizardHMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
